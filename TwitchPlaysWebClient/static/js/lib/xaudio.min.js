function Resampler(fromSampleRate,toSampleRate,channels,outputBufferSize,noReturn){this.fromSampleRate=fromSampleRate;this.toSampleRate=toSampleRate;this.channels=channels|0;this.outputBufferSize=outputBufferSize;this.noReturn=!!noReturn;this.initialize()}
Resampler.prototype.initialize=function(){if(this.fromSampleRate>0&&this.toSampleRate>0&&this.channels>0){if(this.fromSampleRate==this.toSampleRate){this.resampler=this.bypassResampler;this.ratioWeight=1}
else{this.compileInterpolationFunction();this.resampler=this.interpolate;this.ratioWeight=this.fromSampleRate/this.toSampleRate;this.tailExists=!1;this.lastWeight=0;this.initializeBuffers()}}
else{throw(new Error("Invalid settings specified for the resampler."))}}
Resampler.prototype.compileInterpolationFunction=function(){var toCompile="var bufferLength = Math.min(buffer.length, this.outputBufferSize);\
	if ((bufferLength % "+this.channels+") == 0) {\
		if (bufferLength > 0) {\
			var ratioWeight = this.ratioWeight;\
			var weight = 0;";for(var channel=0;channel<this.channels;++channel){toCompile+="var output"+channel+" = 0;"}
 toCompile+="var actualPosition = 0;\
			var amountToNext = 0;\
			var alreadyProcessedTail = !this.tailExists;\
			this.tailExists = false;\
			var outputBuffer = this.outputBuffer;\
			var outputOffset = 0;\
			var currentPosition = 0;\
			do {\
				if (alreadyProcessedTail) {\
					weight = ratioWeight;";for(channel=0;channel<this.channels;++channel){toCompile+="output"+channel+" = 0;"}
 toCompile+="}\
				else {\
					weight = this.lastWeight;";for(channel=0;channel<this.channels;++channel){toCompile+="output"+channel+" = this.lastOutput["+channel+"];"}
 toCompile+="alreadyProcessedTail = true;\
				}\
				while (weight > 0 && actualPosition < bufferLength) {\
					amountToNext = 1 + actualPosition - currentPosition;\
					if (weight >= amountToNext) {";for(channel=0;channel<this.channels;++channel){toCompile+="output"+channel+" += buffer[actualPosition++] * amountToNext;"}
 toCompile+="currentPosition = actualPosition;\
						weight -= amountToNext;\
					}\
					else {";for(channel=0;channel<this.channels;++channel){toCompile+="output"+channel+" += buffer[actualPosition"+((channel>0)?(" + "+channel):"")+"] * weight;"}
 toCompile+="currentPosition += weight;\
						weight = 0;\
						break;\
					}\
				}\
				if (weight == 0) {";for(channel=0;channel<this.channels;++channel){toCompile+="outputBuffer[outputOffset++] = output"+channel+" / ratioWeight;"}
 toCompile+="}\
				else {\
					this.lastWeight = weight;";for(channel=0;channel<this.channels;++channel){toCompile+="this.lastOutput["+channel+"] = output"+channel+";"}
 toCompile+="this.tailExists = true;\
					break;\
				}\
			} while (actualPosition < bufferLength);\
			return this.bufferSlice(outputOffset);\
		}\
		else {\
			return (this.noReturn) ? 0 : [];\
		}\
	}\
	else {\
		throw(new Error(\"Buffer was of incorrect sample length.\"));\
	}";this.interpolate=Function("buffer",toCompile)}
Resampler.prototype.bypassResampler=function(buffer){if(this.noReturn){this.outputBuffer=buffer;return buffer.length}
else{return buffer}}
Resampler.prototype.bufferSlice=function(sliceAmount){if(this.noReturn){return sliceAmount}
else{try{return this.outputBuffer.subarray(0,sliceAmount)}
catch(error){try{this.outputBuffer.length=sliceAmount;return this.outputBuffer}
catch(error){return this.outputBuffer.slice(0,sliceAmount)}}}}
Resampler.prototype.initializeBuffers=function(generateTailCache){try{this.outputBuffer=new Float32Array(this.outputBufferSize);this.lastOutput=new Float32Array(this.channels)}
catch(error){this.outputBuffer=[];this.lastOutput=[]}}
function XAudioServer(channels,sampleRate,minBufferSize,maxBufferSize,underRunCallback,defaultValue){this.audioChannels=(channels==2)?2:1;webAudioMono=(this.audioChannels==1);XAudioJSSampleRate=(sampleRate>0&&sampleRate<=0xFFFFFF)?sampleRate:44100;webAudioMinBufferSize=(minBufferSize>=(samplesPerCallback<<1)&&minBufferSize<maxBufferSize)?(minBufferSize&((webAudioMono)?0xFFFFFFFF:0xFFFFFFFE)):(samplesPerCallback<<1);webAudioMaxBufferSize=(Math.floor(maxBufferSize)>webAudioMinBufferSize+this.audioChannels)?(maxBufferSize&((webAudioMono)?0xFFFFFFFF:0xFFFFFFFE)):(minBufferSize<<1);this.underRunCallback=(typeof underRunCallback=="function")?underRunCallback:function(){};defaultNeutralValue=(defaultValue>=-1&&defaultValue<=1&&defaultValue!=0)?defaultValue:0;this.audioType=-1;this.mozAudioTail=[];this.audioHandleMoz=null;this.audioHandleFlash=null;this.flashInitialized=!1;this.mozAudioFound=!1;this.initializeAudio()}
XAudioServer.prototype.MOZWriteAudio=function(buffer){this.MOZWriteAudioNoCallback(buffer);this.MOZExecuteCallback()}
XAudioServer.prototype.MOZWriteAudioNoCallback=function(buffer){this.writeMozAudio(buffer)}
XAudioServer.prototype.callbackBasedWriteAudio=function(buffer){this.callbackBasedWriteAudioNoCallback(buffer);this.callbackBasedExecuteCallback()}
XAudioServer.prototype.callbackBasedWriteAudioNoCallback=function(buffer){if(!buffer){return}
 var length=buffer.length;for(var bufferCounter=0;bufferCounter<length&&audioBufferSize<webAudioMaxBufferSize;){audioContextSampleBuffer[audioBufferSize++]=buffer[bufferCounter++]}}
XAudioServer.prototype.writeAudio=function(buffer){if(this.audioType==0){this.MOZWriteAudio(buffer)}
else if(this.audioType==1){this.callbackBasedWriteAudio(buffer)}
else if(this.audioType==2){if(this.checkFlashInit()||launchedContext){this.callbackBasedWriteAudio(buffer)}
else if(this.mozAudioFound){this.MOZWriteAudio(buffer)}}}
XAudioServer.prototype.writeAudioNoCallback=function(buffer){if(this.audioType==0){this.MOZWriteAudioNoCallback(buffer)}
else if(this.audioType==1){this.callbackBasedWriteAudioNoCallback(buffer)}
else if(this.audioType==2){if(this.checkFlashInit()||launchedContext){this.callbackBasedWriteAudioNoCallback(buffer)}
else if(this.mozAudioFound){this.MOZWriteAudioNoCallback(buffer)}}}
XAudioServer.prototype.remainingBuffer=function(){if(this.audioType==0){return this.samplesAlreadyWritten-this.audioHandleMoz.mozCurrentSampleOffset()}
else if(this.audioType==1){return(((resampledSamplesLeft()*resampleControl.ratioWeight)>>(this.audioChannels-1))<<(this.audioChannels-1))+audioBufferSize}
else if(this.audioType==2){if(this.checkFlashInit()||launchedContext){return(((resampledSamplesLeft()*resampleControl.ratioWeight)>>(this.audioChannels-1))<<(this.audioChannels-1))+audioBufferSize}
else if(this.mozAudioFound){return this.samplesAlreadyWritten-this.audioHandleMoz.mozCurrentSampleOffset()}}
 return 0}
XAudioServer.prototype.MOZExecuteCallback=function(){var samplesRequested=webAudioMinBufferSize-this.remainingBuffer();if(samplesRequested>0){this.writeMozAudio(this.underRunCallback(samplesRequested))}}
XAudioServer.prototype.callbackBasedExecuteCallback=function(){var samplesRequested=webAudioMinBufferSize-this.remainingBuffer();if(samplesRequested>0){this.callbackBasedWriteAudioNoCallback(this.underRunCallback(samplesRequested))}}
XAudioServer.prototype.executeCallback=function(){if(this.audioType==0){this.MOZExecuteCallback()}
else if(this.audioType==1){this.callbackBasedExecuteCallback()}
else if(this.audioType==2){if(this.checkFlashInit()||launchedContext){this.callbackBasedExecuteCallback()}
else if(this.mozAudioFound){this.MOZExecuteCallback()}}}
XAudioServer.prototype.initializeAudio=function(){try{this.preInitializeMozAudio();if(navigator.platform=="Linux i686"){throw(new Error(""))}
 this.initializeMozAudio()}
catch(error){try{this.initializeWebAudio()}
catch(error){try{this.initializeFlashAudio()}
catch(error){throw(new Error("Browser does not support real time audio output."))}}}}
XAudioServer.prototype.preInitializeMozAudio=function(){this.audioHandleMoz=new Audio();this.audioHandleMoz.mozSetup(this.audioChannels,XAudioJSSampleRate);this.samplesAlreadyWritten=0;var emptySampleFrame=(this.audioChannels==2)?[0,0]:[0];var prebufferAmount=0;if(navigator.platform!="MacIntel"&&navigator.platform!="MacPPC"){while(this.audioHandleMoz.mozCurrentSampleOffset()==0){prebufferAmount+=this.audioHandleMoz.mozWriteAudio(emptySampleFrame)}
 var samplesToDoubleBuffer=prebufferAmount/this.audioChannels;for(var index=0;index<samplesToDoubleBuffer;index++){this.samplesAlreadyWritten+=this.audioHandleMoz.mozWriteAudio(emptySampleFrame)}}
 this.samplesAlreadyWritten+=prebufferAmount;webAudioMinBufferSize+=this.samplesAlreadyWritten;this.mozAudioFound=!0}
XAudioServer.prototype.initializeMozAudio=function(){this.writeMozAudio(getFloat32(webAudioMinBufferSize));this.audioType=0}
XAudioServer.prototype.initializeWebAudio=function(){if(launchedContext){resetCallbackAPIAudioBuffer(webAudioActualSampleRate,samplesPerCallback);this.audioType=1}
else{throw(new Error(""))}}
XAudioServer.prototype.initializeFlashAudio=function(){var existingFlashload=document.getElementById("XAudioJS");if(existingFlashload==null){var thisObj=this;var mainContainerNode=document.createElement("div");mainContainerNode.setAttribute("style","position: fixed; bottom: 0px; right: 0px; margin: 0px; padding: 0px; border: none; width: 8px; height: 8px; overflow: hidden; z-index: -1000; ");var containerNode=document.createElement("div");containerNode.setAttribute("style","position: static; border: none; width: 0px; height: 0px; visibility: hidden; margin: 8px; padding: 0px;");containerNode.setAttribute("id","XAudioJS");mainContainerNode.appendChild(containerNode);document.getElementsByTagName("body")[0].appendChild(mainContainerNode);swfobject.embedSWF("XAudioJS.swf","XAudioJS","8","8","9.0.0","",{},{"allowscriptaccess":"always"},{"style":"position: static; visibility: hidden; margin: 8px; padding: 0px; border: none"},function(event){if(event.success){thisObj.audioHandleFlash=event.ref}
else{thisObj.audioType=1}})}
else{this.audioHandleFlash=existingFlashload}
 this.audioType=2}
XAudioServer.prototype.writeMozAudio=function(buffer){if(!buffer){return}
 var length=this.mozAudioTail.length;if(length>0){var samplesAccepted=this.audioHandleMoz.mozWriteAudio(this.mozAudioTail);this.samplesAlreadyWritten+=samplesAccepted;this.mozAudioTail.splice(0,samplesAccepted)}
 length=Math.min(buffer.length,webAudioMaxBufferSize-this.samplesAlreadyWritten+this.audioHandleMoz.mozCurrentSampleOffset());var samplesAccepted=this.audioHandleMoz.mozWriteAudio(buffer);this.samplesAlreadyWritten+=samplesAccepted;for(var index=0;length>samplesAccepted;--length){this.mozAudioTail.push(buffer[index++])}}
XAudioServer.prototype.checkFlashInit=function(){if(!this.flashInitialized&&this.audioHandleFlash&&this.audioHandleFlash.initialize){this.flashInitialized=!0;this.audioHandleFlash.initialize(this.audioChannels,defaultNeutralValue);resetCallbackAPIAudioBuffer(44100,samplesPerCallback)}
 return this.flashInitialized}
function getFloat32(size){try{var newBuffer=new Float32Array(size)}
catch(error){var newBuffer=new Array(size)}
 for(var audioSampleIndice=0;audioSampleIndice<size;++audioSampleIndice){newBuffer[audioSampleIndice]=defaultNeutralValue*(audioSampleIndice/size)}
 return newBuffer}
function getFloat32Flat(size){try{var newBuffer=new Float32Array(size)}
catch(error){var newBuffer=new Array(size);var audioSampleIndice=0;do{newBuffer[audioSampleIndice]=0}while(++audioSampleIndice<size);}
 return newBuffer}
var samplesPerCallback=2048;var outputConvert=null;function audioOutputFlashEvent(){resampleRefill();return outputConvert()}
function generateFlashStereoString(){var copyBinaryStringLeft="";var copyBinaryStringRight="";for(var index=0;index<samplesPerCallback&&resampleBufferStart!=resampleBufferEnd;++index){copyBinaryStringLeft+=String.fromCharCode(((Math.min(Math.max(resampled[resampleBufferStart++]+1,0),2)*0x3FFF)|0)+0x3000);copyBinaryStringRight+=String.fromCharCode(((Math.min(Math.max(resampled[resampleBufferStart++]+1,0),2)*0x3FFF)|0)+0x3000);if(resampleBufferStart==resampleBufferSize){resampleBufferStart=0}}
 return copyBinaryStringLeft+copyBinaryStringRight}
function generateFlashMonoString(){var copyBinaryString="";for(var index=0;index<samplesPerCallback&&resampleBufferStart!=resampleBufferEnd;++index){copyBinaryString+=String.fromCharCode(((Math.min(Math.max(resampled[resampleBufferStart++]+1,0),2)*0x3FFF)|0)+0x3000);if(resampleBufferStart==resampleBufferSize){resampleBufferStart=0}}
 return copyBinaryString}
var audioContextHandle=null;var audioNode=null;var audioSource=null;var launchedContext=!1;var audioContextSampleBuffer=[];var resampled=[];var webAudioMinBufferSize=15000;var webAudioMaxBufferSize=25000;var webAudioActualSampleRate=44100;var XAudioJSSampleRate=0;var webAudioMono=!1;var defaultNeutralValue=0;var resampleControl=null;var audioBufferSize=0;var resampleBufferStart=0;var resampleBufferEnd=0;var resampleBufferSize=2;function audioOutputEvent(event){var index=0;var buffer1=event.outputBuffer.getChannelData(0);var buffer2=event.outputBuffer.getChannelData(1);resampleRefill();if(!webAudioMono){while(index<samplesPerCallback&&resampleBufferStart!=resampleBufferEnd){buffer1[index]=resampled[resampleBufferStart++];buffer2[index++]=resampled[resampleBufferStart++];if(resampleBufferStart==resampleBufferSize){resampleBufferStart=0}}}
else{while(index<samplesPerCallback&&resampleBufferStart!=resampleBufferEnd){buffer2[index]=buffer1[index]=resampled[resampleBufferStart++];++index;if(resampleBufferStart==resampleBufferSize){resampleBufferStart=0}}}
 while(index<samplesPerCallback){buffer2[index]=buffer1[index]=defaultNeutralValue;++index}}
function resampleRefill(){if(audioBufferSize>0){var resampleLength=resampleControl.resampler(getBufferSamples());var resampledResult=resampleControl.outputBuffer;for(var index2=0;index2<resampleLength;++index2){resampled[resampleBufferEnd++]=resampledResult[index2];if(resampleBufferEnd==resampleBufferSize){resampleBufferEnd=0}
 if(resampleBufferStart==resampleBufferEnd){++resampleBufferStart;if(resampleBufferStart==resampleBufferSize){resampleBufferStart=0}}}
 audioBufferSize=0}}
function resampledSamplesLeft(){return((resampleBufferStart<=resampleBufferEnd)?0:resampleBufferSize)+resampleBufferEnd-resampleBufferStart}
function getBufferSamples(){try{return audioContextSampleBuffer.subarray(0,audioBufferSize)}
catch(error){try{audioContextSampleBuffer.length=audioBufferSize;return audioContextSampleBuffer}
catch(error){return audioContextSampleBuffer.slice(0,audioBufferSize)}}}
function resetCallbackAPIAudioBuffer(APISampleRate,bufferAlloc){audioContextSampleBuffer=getFloat32(webAudioMaxBufferSize);audioBufferSize=webAudioMaxBufferSize;resampleBufferStart=0;resampleBufferEnd=0;resampleBufferSize=Math.max(webAudioMaxBufferSize*Math.ceil(XAudioJSSampleRate/APISampleRate),samplesPerCallback)<<1;if(webAudioMono){resampled=getFloat32Flat(resampleBufferSize);resampleControl=new Resampler(XAudioJSSampleRate,APISampleRate,1,resampleBufferSize,!0);outputConvert=generateFlashMonoString}
else{resampleBufferSize<<=1;resampled=getFloat32Flat(resampleBufferSize);resampleControl=new Resampler(XAudioJSSampleRate,APISampleRate,2,resampleBufferSize,!0);outputConvert=generateFlashStereoString}}(function(){if(!launchedContext){try{audioContextHandle=new AudioContext()}
catch(error){try{audioContextHandle=new AudioContext()}
catch(error){return}}
 try{audioSource=audioContextHandle.createBufferSource();audioSource.loop=!1;XAudioJSSampleRate=webAudioActualSampleRate=audioContextHandle.sampleRate;audioSource.buffer=audioContextHandle.createBuffer(1,1,webAudioActualSampleRate);audioNode=audioContextHandle.createJavaScriptNode(samplesPerCallback,1,2);audioNode.onaudioprocess=audioOutputEvent;audioSource.connect(audioNode);audioNode.connect(audioContextHandle.destination);audioSource.noteOn(0)}
 catch(error){return}
 launchedContext=!0}})()
